<?php
/*
Plugin Name: WooCommerce Product Block
Description: This block displays a form for creating a WooCommerce Product
Version:     1.0.0
Author:      James Welbes
Author URI:  https://apexbranding.design
License:     GPL2
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: woo-product-block
*/

function woo_product_block_register_block() {
    // Path to the block's assets as generated by the build process.
    $asset_file_path = plugin_dir_path( __FILE__ ) . 'build/woo-product-block/index.asset.php';

    // Check if the asset file exists. If not, log an error and exit the function.
    if (!file_exists($asset_file_path)) {
        error_log('The file index.asset.php was not found: ' . $asset_file_path);
        return;
    }

    // Include the asset file to get dependencies and version.
    $asset_file = include( $asset_file_path );

    // Register the block editor script.
    wp_register_script('woo-product-block-editor', plugins_url('build/woo-product-block/index.js', __FILE__), $asset_file['dependencies'], $asset_file['version']);

    // Assuming 'woo-product-block-editor' is the handle for your script
    wp_localize_script('woo-product-block-editor', 'wooProductBlockData', array(
        'nonce' => wp_create_nonce('wp_rest'),
        'apiUrl' => esc_url_raw(rest_url('your-namespace/v1/create-product')),
    ));
    
    wp_enqueue_script('woo-product-block-editor');

    // Register the block, and associate it with the editor script.
    register_block_type( 'your-namespace/woocommerce-product-block', array(
        'editor_script' => 'woo-product-block-editor',
        'render_callback' => 'woo_product_block_render_callback',
    ) );

    // Fetch WooCommerce product categories
    $product_categories = get_terms([
        'taxonomy' => 'product_cat',
        'hide_empty' => false,
    ]);

    // Prepare categories for JavaScript
    $categories_for_js = [];
    foreach ($product_categories as $category) {
        $categories_for_js[] = [
            'id' => $category->term_id,
            'name' => $category->name,
        ];
    }

    // Localize script with categories data
    wp_localize_script('woo-product-block-editor', 'wooProductBlockData', [
        'nonce' => wp_create_nonce('wp_rest'),
        'apiUrl' => esc_url_raw(rest_url('your-namespace/v1/create-product')),
        'categories' => $categories_for_js,
    ]);

    wp_enqueue_script('woo-product-block-editor');
}
add_action( 'init', 'woo_product_block_register_block' );

function woo_product_block_render_callback( $block_attributes, $content ) {
    // Example form. In a real scenario, you should fetch categories and handle file uploads securely.
    $form_html = <<<HTML
<div class="woo-product-form">
    <form id="woo-product-create-form" method="post">
        <label for="product_name">Product Name</label>
        <input type="text" id="product_name" name="product_name" required>

        <label for="product_description">Product Description</label>
        <textarea id="product_description" name="product_description" required></textarea>

        <label for="product_excerpt">Product Excerpt</label>
        <textarea id="product_excerpt" name="product_excerpt"></textarea>

        <label for="price">Price</label>
        <input type="number" id="price" name="price" step="0.01" required>

        <label for="sale_price">Sale Price (optional)</label>
        <input type="number" id="sale_price" name="sale_price" step="0.01">

        <label for="is_virtual">Virtual Product?</label>
        <input type="checkbox" id="is_virtual" name="is_virtual" value="yes">

        <!-- Simplified for example. You should dynamically generate category options. -->
        <div id="product_categories_checkboxes"></div>

        <label for="product_thumbnail">Product Thumbnail</label>
        <input type="file" id="product_thumbnail" name="product_thumbnail" accept="image/png, image/jpeg">

        <label for="limit_per_customer">Limit 1 per customer?</label>
        <input type="checkbox" id="limit_per_customer" name="limit_per_customer" value="yes">

        <label for="set_quantity">Set Quantity?</label>
        <input type="checkbox" id="set_quantity" name="set_quantity" value="yes" onchange="toggleStockField(this)">

        <label for="stock" style="display:none;">Stock</label>
        <input type="number" id="stock" name="stock" style="display:none;">

        <button type="submit">Submit</button>
    </form>
</div>
<script>
function toggleStockField(checkbox) {
    var stockField = document.getElementById('stock');
    var stockLabel = document.querySelector('label[for="stock"]');
    if (checkbox.checked) {
        stockField.style.display = 'block';
        stockLabel.style.display = 'block';
    } else {
        stockField.style.display = 'none';
        stockLabel.style.display = 'none';
    }
}

document.getElementById('woo-product-create-form').addEventListener('submit', function(event) {
    event.preventDefault();

    const formData = new FormData(this);
    const productName = formData.get('product_name'); // Get the product name from the form
    const jsonFormData = Object.fromEntries(formData);
    const categories = formData.getAll('product_categories[]');
    jsonFormData.product_categories = categories;
    
    fetch(wooProductBlockData.apiUrl, {
        method: 'POST',
        headers: {
            'X-WP-Nonce': wooProductBlockData.nonce,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonFormData),
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log(data);
        // Display success message with the product name
        document.getElementById('woo-product-create-form').insertAdjacentHTML('afterend', '<p>' + productName + ' successfully created</p>');
        // Reset the form for new input
        console.log(productName + " created");
        document.getElementById('woo-product-create-form').reset();
        // Optionally, hide or reset additional fields manually if needed
    })
    .catch(error => {
        console.error('Error:', error);
        document.getElementById('woo-product-create-form').insertAdjacentHTML('afterend', '<p>Error creating product</p>');
    });
});
document.addEventListener('DOMContentLoaded', function() {
    const categoriesContainer = document.getElementById('product_categories_checkboxes');
    if (categoriesContainer && wooProductBlockData.categories) {
        wooProductBlockData.categories.forEach(function(category) {
            const checkboxHtml = '<label>' +
                '<input type="checkbox" name="product_categories[]" value="' + category.id + '"> ' + category.name +
                '</label>';
            categoriesContainer.insertAdjacentHTML('beforeend', checkboxHtml);
        });
    }
});


</script>




HTML;

    return $form_html;
}


function create_woocommerce_product_from_form( WP_REST_Request $request ) {
    // Extracting all data sent in the request
    $data = $request->get_params();

    $product = new WC_Product_Simple();
    $product->set_name($data['product_name']);
    $product->set_description($data['product_description']);
    $product->set_short_description($data['product_excerpt']);
    $product->set_regular_price($data['price']);
    
    if (!empty($data['sale_price'])) {
        $product->set_sale_price($data['sale_price']);
    }

    $product->set_virtual('yes' === $data['is_virtual']);

    // Handle stock and manage stock status based on 'set_quantity' checkbox
    if (!empty($data['set_quantity']) && $data['set_quantity'] === 'yes' && isset($data['stock'])) {
        $product->set_manage_stock(true); // Enable stock management
        $product->set_stock_quantity($data['stock']); // Set stock quantity
    } else {
        $product->set_manage_stock(false); // Disable stock management if not set
    }

    $product_id = $product->save(); // Save to get an ID before setting categories

    // Handle product categories if provided
    if (!empty($data['product_categories']) && is_array($data['product_categories'])) {
        $product->set_category_ids($data['product_categories']); // Expects an array of term IDs
    }

    $product->save(); // Save again with all settings

    // Further handling for thumbnail, etc., goes here

    return new WP_REST_Response(['message' => 'Product successfully created', 'product_id' => $product_id], 200);
}



add_action( 'rest_api_init', function () {
    register_rest_route( 'your-namespace/v1', '/create-product', array(
        'methods' => 'POST',
        'callback' => 'create_woocommerce_product_from_form',
        'permission_callback' => function () {
            return current_user_can( 'edit_posts' );
        }
    ) );
} );
